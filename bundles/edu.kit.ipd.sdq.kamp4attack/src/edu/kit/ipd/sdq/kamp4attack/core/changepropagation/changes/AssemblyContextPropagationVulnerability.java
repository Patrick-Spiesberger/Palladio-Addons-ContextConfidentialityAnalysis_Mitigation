package edu.kit.ipd.sdq.kamp4attack.core.changepropagation.changes;

import java.util.List;

import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandlerAttacker;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.confidentiality.context.system.pcm.structure.ServiceRestriction;
import org.palladiosimulator.pcm.core.composition.AssemblyContext;

import edu.kit.ipd.sdq.kamp4attack.core.BlackboardWrapper;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.AssemblyContextHandler;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.LinkingResourceHandler;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.ResourceContainerHandler;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability.AssemblyContextVulnerability;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability.LinkingResourceVulnerability;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability.MethodVulnerability;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability.ResourceContainerVulnerability;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;

public class AssemblyContextPropagationVulnerability extends AssemblyContextChange {

    public AssemblyContextPropagationVulnerability(final BlackboardWrapper v, CredentialChange change) {
        super(v, change);
    }

    @Override
    public void calculateAssemblyContextToContextPropagation() {
        super.calculateAssemblyContextToContextPropagation();
        final var listCompromisedContexts = getCompromisedAssemblyContexts();
        for (final var component : listCompromisedContexts) {
            final var handler = new AssemblyContextVulnerability(this.modelStorage,
                    new DataHandlerAttacker(this.changes), AttackVector.LOCAL);
            handler.attackAssemblyContext(List.of(component), this.changes, component, getAttacker());
        }

    }

    @Override
    protected ResourceContainerHandler getLocalResourceHandler() {
        return new ResourceContainerVulnerability(this.modelStorage, new DataHandlerAttacker(this.changes),
                AttackVector.LOCAL);
    }

    @Override
    protected AssemblyContextHandler getAssemblyHandler() {
        return new AssemblyContextVulnerability(this.modelStorage, new DataHandlerAttacker(this.changes),
                AttackVector.ADJACENT_NETWORK);
    }

    @Override
    protected LinkingResourceHandler getLinkingHandler() {
        return new LinkingResourceVulnerability(this.modelStorage, new DataHandlerAttacker(this.changes),
                AttackVector.ADJACENT_NETWORK);
    }

    @Override
    protected ResourceContainerHandler getRemoteResourceHandler() {
        return new ResourceContainerVulnerability(this.modelStorage, new DataHandlerAttacker(this.changes),
                AttackVector.ADJACENT_NETWORK);
    }

    @Override
    protected void handleSeff(final CredentialChange changes, final List<ServiceRestriction> services,
            final AssemblyContext source) {
        final var handler = new MethodVulnerability(this.modelStorage, new DataHandlerAttacker(this.changes),
                AttackVector.ADJACENT_NETWORK);
        handler.attackService(services, changes, source, getAttacker());

    }

}
