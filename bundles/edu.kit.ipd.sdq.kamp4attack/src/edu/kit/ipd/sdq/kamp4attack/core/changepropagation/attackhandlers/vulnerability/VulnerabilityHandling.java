package edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability;

import java.util.List;
import java.util.Optional;

import org.eclipse.emf.ecore.EObject;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Attack;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.ConfidentialityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Vulnerability;

import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.changes.HelperUpdateCredentialChange;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;

/**
 * This class provides methods for concrete execution of a vulnerability
 * 
 * @author Maximilian Walter
 * @author Patrick Spiesberger
 *
 */
abstract class VulnerabilityHandling<T> {

	public Optional<T> executeVulnerabilityHandling(final EObject element, final CredentialChange change,
			final EObject source, final Vulnerability vulnerability, final List<Attack> attacks) {
		if (vulnerability == null) {
			return Optional.empty();
		}

		if (!vulnerability.getGainedAttributes().isEmpty()) {
			final var streamCredentials = vulnerability.getGainedAttributes().stream()
					.map(credential -> HelperUpdateCredentialChange.createContextChange(credential,
							List.of(element, vulnerability)));
			HelperUpdateCredentialChange.updateCredentials(change, streamCredentials);
		}
		if (vulnerability.isTakeOver()) {
			return this.handleTakeOver(element, source, vulnerability);

		} else if (vulnerability.getConfidentialityImpact() != ConfidentialityImpact.NONE) {
			this.handleConfidentiality(element, change, attacks);
		}
		return Optional.empty();
	}

	protected abstract Optional<T> handleTakeOver(EObject container, EObject source, Vulnerability vulnerability);

	protected abstract void handleConfidentiality(EObject container, CredentialChange change, List<Attack> attacks);

}
