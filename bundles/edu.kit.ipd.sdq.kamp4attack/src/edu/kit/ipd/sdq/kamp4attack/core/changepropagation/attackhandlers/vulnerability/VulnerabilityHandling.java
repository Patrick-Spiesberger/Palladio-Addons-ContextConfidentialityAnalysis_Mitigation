package edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability;

import java.util.List;
import java.util.Optional;

import org.eclipse.emf.ecore.EObject;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.ConfidentialityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Vulnerability;

import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.changes.HelperUpdateCredentialChange;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;

abstract class VulnerabilityHandling<T> {

	//TODO: Verschl√ºsselung
    public Optional<T> executeVulnerabilityHandling(final EObject element, final CredentialChange change,
            final EObject source, final Vulnerability vulnerability) {
        if (vulnerability == null) {
            return Optional.empty();
        }
        if (!vulnerability.getGainedAttributes().isEmpty()) {
            final var streamCredentials = vulnerability.getGainedAttributes().stream()
                    .map(credential -> HelperUpdateCredentialChange.createContextChange(credential,
                            List.of(element, vulnerability)));
            HelperUpdateCredentialChange.updateCredentials(change, streamCredentials);
        }
        if (vulnerability.isTakeOver()) {
            return this.handleTakeOver(element, source, vulnerability);

        } else if (vulnerability.getConfidentialityImpact() != ConfidentialityImpact.NONE) {
            this.handleConfidentiality(element);
        }
        return Optional.empty();
    }

    protected abstract Optional<T> handleTakeOver(EObject container, EObject source, Vulnerability vulnerability);

    protected abstract void handleConfidentiality(EObject container);

}
