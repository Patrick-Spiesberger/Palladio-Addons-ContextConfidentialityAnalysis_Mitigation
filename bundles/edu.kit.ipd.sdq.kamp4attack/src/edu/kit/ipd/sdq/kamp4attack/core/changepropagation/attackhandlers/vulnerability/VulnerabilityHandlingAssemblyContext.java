package edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability;

import java.util.List;
import java.util.Optional;

import org.eclipse.emf.ecore.EObject;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.AssemblyHelper;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.HelperCreationCompromisedElements;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandler;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandlerAttacker;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.Attacker;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Vulnerability;
import org.palladiosimulator.pcm.core.composition.AssemblyContext;

import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CompromisedAssembly;

public class VulnerabilityHandlingAssemblyContext extends VulnerabilityHandling<CompromisedAssembly> {

	private final DataHandlerAttacker dataHandler;

	public VulnerabilityHandlingAssemblyContext(final DataHandlerAttacker dataHandler) {
		this.dataHandler = dataHandler;
	}

	@Override
	protected Optional<CompromisedAssembly> handleTakeOver(final EObject container, final EObject source,
			final Vulnerability vulnerability) {
		if (container instanceof AssemblyContext) {
			final var component = HelperCreationCompromisedElements.createCompromisedAssembly(
					(AssemblyContext) container, AssemblyHelper.getAssemblyContextDetail((AssemblyContext) container),
					List.of(source, vulnerability));
			return Optional.of(component);
		}
		throw new IllegalStateException("Wrong datatype" + this);
	}

	@Override
	protected void handleConfidentiality(final EObject container, Attacker attacker) {
		if (container instanceof AssemblyContext) {
			final var data = DataHandler.getData(((AssemblyContext) container), attacker);
			this.dataHandler.addData(data);
			return;
		}
		throw new IllegalStateException("Wrong datatype" + this);

	}

}
