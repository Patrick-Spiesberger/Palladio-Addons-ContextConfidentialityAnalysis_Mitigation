package edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability;

import java.util.List;
import java.util.Optional;

import org.eclipse.emf.ecore.EObject;
import org.palladiosimulator.pcm.allocation.Allocation;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.HelperCreationCompromisedElements;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandler;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandlerAttacker;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Vulnerability;
import org.palladiosimulator.pcm.resourceenvironment.ResourceContainer;

import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CompromisedResource;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;

class VulnerabilityHandlingResource extends VulnerabilityHandling<CompromisedResource> {

    private final DataHandlerAttacker dataHandler;
    private final Allocation allocation;

    public VulnerabilityHandlingResource(final DataHandlerAttacker dataHandler, final Allocation allocation) {
        this.dataHandler = dataHandler;
        this.allocation = allocation;
    }

    @Override
    protected Optional<CompromisedResource> handleTakeOver(final EObject container, final EObject source,
            final Vulnerability vulnerability) {
        if (container instanceof ResourceContainer) {
            final var resource = HelperCreationCompromisedElements
                    .createCompromisedResource((ResourceContainer) container, List.of(source, vulnerability));
            return Optional.of(resource);
        }
        throw new IllegalStateException("Wrong datatype" + container);

    }

    @Override
    protected void handleConfidentiality(final EObject container, CredentialChange change) {
        if (container instanceof ResourceContainer) {
            final var data = DataHandler.getData((ResourceContainer) container, this.allocation, change);
            this.dataHandler.addData(data);
            return;
        }
        throw new IllegalStateException("Wrong datatype " + container);

    }

}
