package edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability;

import java.util.List;
import java.util.Optional;

import org.eclipse.emf.ecore.EObject;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandlerAttacker;
import org.palladiosimulator.pcm.confidentiality.attacker.helper.VulnerabilityHelper;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.Attacker;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.resourceenvironment.ResourceContainer;

import edu.kit.ipd.sdq.kamp4attack.core.BlackboardWrapper;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.ResourceContainerHandler;
import edu.kit.ipd.sdq.kamp4attack.core.contextSelection.ListOperations;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CompromisedResource;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;

import org.palladiosimulator.pcm.confidentiality.context.system.UsageSpecification;

public class ResourceContainerVulnerability extends ResourceContainerHandler {

	private final AttackVector attackVector;

	public ResourceContainerVulnerability(final BlackboardWrapper modelStorage, final DataHandlerAttacker dataHandler,
			final AttackVector attackVector) {
		super(modelStorage, dataHandler);
		this.attackVector = attackVector;
	}

	@Override
	protected Optional<CompromisedResource> attackResourceContainer(final ResourceContainer container,
			final CredentialChange change, final EObject source, Attacker attacker) {
		final var credentials = this.getCredentials(change);
		final var attacks = this.getAttacks();
		final var vulnerabilityList = VulnerabilityHelper
				.getVulnerabilities(this.getModelStorage().getVulnerabilitySpecification(), container);

		ListOperations listHelper = new ListOperations();

		// If only partial lists are returned, this is executed until all lists are
		// returned or a vulnerable component is found
		while (!listHelper.returnedAllElements()) {
			for (List<UsageSpecification> credential : listHelper.calculateLists(credentials, attacker)) {
				final var vulnerability = this.checkVulnerability(container, change, credential, attacks,
						vulnerabilityList, this.attackVector, attacker);
				final var handling = new VulnerabilityHandlingResource(this.getDataHandler(),
						this.getModelStorage().getAllocation());
				Optional<CompromisedResource> resource = handling.executeVulnerabilityHandling(container, change,
						source, vulnerability);
				if (resource.isPresent()) {
					return resource;
				}
			}
		}
		return Optional.empty();
	}

}
