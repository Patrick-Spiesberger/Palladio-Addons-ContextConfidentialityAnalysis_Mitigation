package edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability;

import java.util.List;
import java.util.Optional;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandlerAttacker;
import org.palladiosimulator.pcm.confidentiality.attacker.helper.VulnerabilityHelper;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AssemblyContextDetail;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.Attacker;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.confidentiality.context.system.UsageSpecification;
import org.palladiosimulator.pcm.core.composition.AssemblyContext;

import edu.kit.ipd.sdq.kamp4attack.core.BlackboardWrapper;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.AssemblyContextHandler;
import edu.kit.ipd.sdq.kamp4attack.core.contextSelection.ListOperations;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CompromisedAssembly;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;

public class AssemblyContextVulnerability extends AssemblyContextHandler {

	private final AttackVector attackVector;

	// TODO: Eventuell AttackVector Ã¤ndern

	public AssemblyContextVulnerability(final BlackboardWrapper modelStorage, final DataHandlerAttacker dataHandler,
			final AttackVector attackVector) {
		super(modelStorage, dataHandler);
		this.attackVector = attackVector;
	}

	@Override
	protected Optional<CompromisedAssembly> attackComponent(final AssemblyContext component,
			final CredentialChange change, final EObject source, Attacker attacker) {
		final var credentials = this.getCredentials(change);
		final var attacks = this.getAttacks();

		final var vulnerabilityList = VulnerabilityHelper
				.getVulnerabilities(this.getModelStorage().getVulnerabilitySpecification(), component);

		ListOperations listHelper = new ListOperations();

		while (!listHelper.returnedAllElements()) {
			for (List<UsageSpecification> credential : listHelper.calculateLists(credentials, attacker)) {
				final var vulnerability = this.checkVulnerability(component, change, credential, attacks,
						vulnerabilityList, this.attackVector);
				final var handling = new VulnerabilityHandlingAssemblyContext(this.getDataHandler());
				Optional<CompromisedAssembly> assembly = handling.executeVulnerabilityHandling(component, change,
						source, vulnerability);

				if (assembly.isPresent()) {
					System.out.println("AssemblyContext: List without " + (credentials.size() - credential.size())
							+ " is compromised");
					return assembly;
				}
			}
		}
		return Optional.empty();
	}

	@Override
	protected Optional<CompromisedAssembly> attackComponent(AssemblyContextDetail componentDetail,
			CredentialChange change, EObject source, Attacker attacker) {
		final var credentials = this.getCredentials(change);
		final var attacks = this.getAttacks();

		for (AssemblyContext component : componentDetail.getCompromisedComponents()) {
			final var vulnerabilityList = VulnerabilityHelper
					.getVulnerabilities(this.getModelStorage().getVulnerabilitySpecification(), component);

			ListOperations listHelper = new ListOperations();

			while (!listHelper.returnedAllElements()) {
				for (List<UsageSpecification> credential : listHelper.calculateLists(credentials, attacker)) {
					final var vulnerability = this.checkVulnerability(component, change, credential, attacks,
							vulnerabilityList, this.attackVector);
					final var handling = new VulnerabilityHandlingAssemblyContext(this.getDataHandler());
					Optional<CompromisedAssembly> assembly = handling.executeVulnerabilityHandling(component, change,
							source, vulnerability);

					if (assembly.isPresent()) {
						System.out.println("AssemblyContextDetail: List without "
								+ (credentials.size() - credential.size()) + " is compromised");
						return assembly;
					}
				}
			}
		}
		return Optional.empty();
	}

}
