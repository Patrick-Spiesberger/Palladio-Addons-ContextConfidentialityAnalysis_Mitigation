package org.palladiosimulator.pcm.confidentiality.context.analysis.execution.workflow.job;

import static org.palladiosimulator.pcm.confidentiality.context.analysis.execution.partition.PartitionConstants.PARTITION_ID_ATTACK;
import static org.palladiosimulator.pcm.confidentiality.context.analysis.execution.partition.PartitionConstants.PARTITION_ID_PCM;

import java.util.Objects;

import org.apache.log4j.Logger;
import org.eclipse.core.runtime.IProgressMonitor;
import org.palladiosimulator.analyzer.workflow.blackboard.PCMResourceSetPartition;
import org.palladiosimulator.pcm.confidentiality.context.analysis.execution.Activator;
import org.palladiosimulator.pcm.confidentiality.context.analysis.execution.partition.AttackPartition;
import org.palladiosimulator.pcm.confidentiality.context.scenarioanalysis.api.PCMBlackBoard;

import de.uka.ipd.sdq.workflow.jobs.CleanupFailedException;
import de.uka.ipd.sdq.workflow.jobs.IBlackboardInteractingJob;
import de.uka.ipd.sdq.workflow.jobs.JobFailedException;
import de.uka.ipd.sdq.workflow.jobs.UserCanceledException;
import de.uka.ipd.sdq.workflow.mdsd.blackboard.MDSDBlackboard;

/**
 * Job for assigning vulnerablities of components to assembly contexts
 *
 * @author majuwa
 *
 */
public class VulnerabilityRollOutComponentsJob implements IBlackboardInteractingJob<MDSDBlackboard> {

    private final Logger logger = Logger.getLogger(VulnerabilityRollOutComponentsJob.class);
    private MDSDBlackboard blackboard;

    @Override
    public void execute(IProgressMonitor monitor) throws JobFailedException, UserCanceledException {
        final var pcmPartition = (PCMResourceSetPartition) this.blackboard.getPartition(PARTITION_ID_PCM);
        final var attackPartition = (AttackPartition) this.blackboard.getPartition(PARTITION_ID_ATTACK);
        final var vulnerabilitySpecification = attackPartition.getAttackSpecification().getSystemintegration();

        var pcmBlackboard = new PCMBlackBoard(pcmPartition.getSystem(), pcmPartition.getMiddlewareRepository(), null);
        this.logger.debug("Starting Rollout");
        Activator.getInstance().getRollOut().rollOut(pcmBlackboard, vulnerabilitySpecification.getVulnerabilities());
        this.logger.debug("End Rollout");
    }

    @Override
    public void cleanup(IProgressMonitor monitor) throws CleanupFailedException {
        // not needed

    }

    @Override
    public String getName() {
        return "Rollout Components";
    }

    @Override
    public void setBlackboard(MDSDBlackboard blackboard) {
        Objects.nonNull(blackboard);
        this.blackboard = blackboard;
    }

}
